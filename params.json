{"name":"iprules","tagline":"Simple iptables rules management for people who are scared of iptables","body":"## What is this?\r\n\r\nThis package is a set of scripts to manage iptables rules.  It is enspired by the method apache2 uses to manage sites on Debian systems.\r\n\r\nThat is, one folder with available rules, that get symlinked into a folder of enabled rules.\r\n\r\n## What is required?\r\n\r\nRoot access and iptables.\r\n\r\n## How does it work?\r\n\r\nIn `/etc/iptables/rules-available` you have all the available rules with names you can understand and remember easily.  You then run the `ipenrule` command with the rule name as an argument and it will symlink the rule from the `rules-available` folder into `/etc/iptables/rules-enabled`.  You then need to run `iprules reload` to build the iptables script (in `/etc/iptables.rules`) and load it into iptables.  You can use `ipdisrule` in the same manner to disable a rule.\r\n\r\nIt also uses a policy file (found in `/etc/iptables/policy.rules`) to drop or accept by default (you likely want the former).\r\n\r\n## How to install\r\n\r\nI have built a Debian package you can get from [here](http://hamstar.github.io/iprules/downloads/iprules_1.0.2.deb).\r\n\r\nOtherwise you will have to clone this repo and install it manually. It's pretty straight forward, just copy all the folders (except for DEBIAN) to `/` and then run the `DEBIAN/postinst` script.\r\n\r\n## Examples\r\n\r\nHere is how you would give access to your webserver and allow it to be pinged:\r\n\r\n```sh\r\nipenrule http-in\r\nipenrule ping-in\r\niprules reload\r\n```\r\n\r\nPiece of pie.\r\n\r\nDrop everything except for incoming SSH packets:\r\n\r\n```sh\r\nipenrule ssh-in\r\nippol drop\r\niprules reload\r\n```\r\n\r\nEasy as cake.\r\n\r\nYou will probably want to do this by default:\r\n\r\n```sh\r\nipenrule loopback http-out https-out dns-out ping-out ssh-out ssh-in\r\nippol drop\r\niprules reload\r\n```\r\n\r\nYou can view the iptables rules before you reload them:\r\n\r\n```sh\r\niprules show\r\n```\r\n\r\nDisable access to your webserver:\r\n\r\n```sh\r\nipdisrule http-in https-in\r\niprules reload\r\n```\r\n\r\nI have ommitted the script output for brevity above but it will let you know stuff:\r\n\r\n```sh\r\n$ ipenrule http-out hsdsd ssh-in dns-out\r\nMust be root.\r\n$ sudo ipenrule http-out hsdsd ssh-in dns-out\r\nhttp-out rules enabled\r\nERROR: No such rule called: hsdsd\r\nssh-in rules enabled\r\ndns-out rules enabled\r\nRemember to run 'iprules reload' to activate the configuration.\r\n$ sudo ippol drop\r\nWARNING: be sure remote access is allowed (if needed) before reloading\r\nRemember to run 'iprules reload' to activate the configuration.\r\n$ sudo iprules reload\r\nRebuilt rules file.\r\nReloaded rules.\r\n```\r\n\r\nCheck out what rules are available...\r\n\r\n```sh\r\n$ sudo iprules av[ail]\r\ndns-out\r\nhttp-in\r\nhttp-out\r\nloopback\r\nsynflood-protect\r\n```\r\n\r\nAnd whats enabled...\r\n\r\n```sh\r\n$ sudo iprules en[abled]\r\ndns-out\r\nhttp-out\r\nloopback\r\n```\r\n\r\n## What rules come with it?\r\n\r\nYou can see the list of rules in the [share folder in the source](https://github.com/hamstar/iprules/blob/master/usr/share/iprules/rules/).  If you have ideas for new ones, or see errors in the existing ones submit a patch or pull request and I will add them in.\r\n\r\nAs above, you can also run `iprules avail` to see what rules are installed.\r\n\r\n## Can I write my own rules?\r\n\r\nYou most certainly can.  IPrules makes it easy to manage your iptables rules... if you know the iptables syntax... but you know how to use google right?\r\n\r\nJust make your own file in `/etc/iptables/rules-available` (as root) and then you can use `ipenrule` and `ipdisrule` on it.  If you change it when it's already enabled, simply run `iprules reload` again.\r\n\r\nIf you make an error in the syntax, iptables won't accept it and will fail to reload.\r\n\r\nIf you put comments in the file, they will be printed out when the rule is enabled:\r\n\r\n```sh\r\n$ ipenrule synflood-protect\r\n\r\nNotes from synflood-protect rules:\r\n* need to set net.ipv4.tcp_syncookies=1 in /etc/sysctl.conf\r\n* need to set net.netfilter.nf_conntrack_tcp_timeout_syn_recv=30 in /etc/sysctl.conf\r\n\r\nsynflood-protect rules enabled\r\nRemember to run 'iprules reload' to activate the configuration.\r\n```\r\n\r\n## Enable the rules on boot\r\n\r\nIf you have the package **iptables-persistent** installed on Debian, it will already do this.  RPM based distro's should do this out of the box but may use the file `/etc/sysconfig/iptables` instead.  So delete that file and make a symlink to the rules file (`ln -s /etc/iptables.rules /etc/sysconfig/iptables`.\r\n\r\nIf neither of these is the case, you can just add this line to `/etc/rc.local`:\r\n\r\n```sh\r\n`which iptables-restore` < /etc/iptables.rules;\r\n```\r\n\r\n## WARNING\r\n\r\nBe very careful using the default drop policy (`ippol drop`) with remote systems.  If you have not allowed SSH in then you will lock yourself out!\r\n\r\n## Todo\r\n\r\n* add a `/etc/iptables/envvars` file so you can specify variables to use in the rule files.\r\n* specify priorities in the enable script e.g. `ipenrule last-rule:999`\r\n* add more rules!\r\n* some kind of port forwarding command maybe...?","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}